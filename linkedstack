package itu.data.structure.stack;
import java.util.EmptyStackException;

public class LinkedStack<T> implements StackADT<T> {
	private int count; 
	private LinearNode top=null;
	//private T[] stack;
	//private T[] peek;
	/**
	 * Constructor
	 */
	public LinkedStack() {
		this.count = 0;
		this.top = null;

	}

	
	/* (non-Javadoc)
	 * @see itu.data.structure.stack.StackADT#push(java.lang.Object)
	 */
	public void push(T element) {
		LinearNode temp = new LinearNode(element);

		temp.setNext(this.top);
		this.top = temp;
		this.count++;
	}

	
	/* (non-Javadoc)
	 * @see itu.data.structure.stack.StackADT#pop()
	 */
	public T pop() throws EmptyStackException {
		if (this.isEmpty()) {
			throw new EmptyStackException();
		} else {
			T element = (T) this.top.getElem();
			this.top = this.top.getNext();
			--this.count;
			return element;
		}
		//return result;
	}

	
	/* (non-Javadoc)
	 * @see itu.data.structure.stack.StackADT#peek()
	 */
	public T peek() {
		return null;
	}

	/* (non-Javadoc)
	 * @see itu.data.structure.stack.StackADT#isEmpty()
	 */
	public boolean isEmpty() {
		return (this.count == 0);
	}

	/* (non-Javadoc)
	 * @see itu.data.structure.stack.StackADT#size()
	 */
	public int size() {
		return this.count;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	public String toString() {
		String result = "";
		LinearNode current = this.top;

		while (current != null) {
			result = result + (current.getElem()).toString() + "\n";
			current = current.getNext();
		}

		return result;
	}
